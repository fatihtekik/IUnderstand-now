import os
import logging
from datetime import datetime

import psycopg2.errors
import telebot
from telebot import types
import psycopg2 as psycopg
from telebot.types import ReplyKeyboardRemove
import bcrypt
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = '7576683979:AAF3OwSTLwIA_AAnu0ZVOZUpCk3lIJWsQTQ'
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = telebot.TeleBot(TOKEN)

STUDENT_R = 'student'
TEACHER_R = 'teacher'

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('documents'):
    os.makedirs('documents')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def connect_to_db():
    try:
        conn = psycopg.connect(
            dbname="–ø–∞–ø–∞–ø–∞–ø",
            user="postgres",
            password="Aidana2007",
            host="localhost",
            port="5432"
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def save_or_update_chat_id(id_student, chat_id):
    conn = connect_to_db()
    if not conn:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chat_id.")
        return False
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT chat_id FROM student_chat_id WHERE id_student = %s", (id_student,))
        result = cursor.fetchone()
        if result:
            cursor.execute("UPDATE student_chat_id SET chat_id = %s WHERE id_student = %s", (chat_id, id_student))
            logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω chat_id –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {id_student}.")
        else:
            cursor.execute("INSERT INTO student_chat_id (id_student, chat_id) VALUES (%s, %s)", (id_student, chat_id))
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π chat_id –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {id_student}.")
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chat_id: {e}")
        return False
    finally:
        cursor.close()
        conn.close()

def hash_existing_passwords():
    conn = connect_to_db()
    if not conn:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π.")
        return
    try:
        cursor = conn.cursor()

        # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT * FROM StudentLoginView;")
        users = cursor.fetchall()
        for user in users:
            id_user, plain_password = user
            if plain_password.startswith("$2b$") or plain_password.startswith("$2a$") or plain_password.startswith("$2y$"):
                # –ü–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω
                continue
            hashed = bcrypt.hashpw(plain_password.encode('utf-8'), bcrypt.gensalt())
            cursor.execute("UPDATE login SET password = %s WHERE id_user = %s", (hashed.decode('utf-8'), id_user))
            logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {id_user} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω.")

        # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT * FROM TeacherLoginView;")
        teachers = cursor.fetchall()
        for teacher in teachers:
            teacher_login_id, plain_password = teacher
            if plain_password.startswith("$2b$") or plain_password.startswith("$2a$") or plain_password.startswith("$2y$"):
                # –ü–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω
                continue
            hashed = bcrypt.hashpw(plain_password.encode('utf-8'), bcrypt.gensalt())
            cursor.execute("UPDATE teacher_login SET password = %s WHERE teacher_login_id = %s",
                           (hashed.decode('utf-8'), teacher_login_id))
            logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_login_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω.")

        conn.commit()
        logger.info("–í—Å–µ –ø–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π: {e}")
    finally:
        cursor.close()
        conn.close()

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
# hash_existing_passwords()

@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "step": "login",
        "role": None,
        "id_student": None,
        "id_teacher": None
    }
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ùêÄùñºùñæùêíùóêùóÇùóÜ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω.", reply_markup=ReplyKeyboardRemove())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "login")
def process_login(message):
    chat_id = message.chat.id
    login = message.text.strip()

    conn = connect_to_db()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT id_student FROM login WHERE login = %s", (login,))
            student = cursor.fetchone()

            cursor.execute("SELECT id_teacher FROM teacher_login WHERE login = %s", (login,))
            teacher = cursor.fetchone()

            if student:
                user_data[chat_id]["step"] = "password"
                user_data[chat_id]["login"] = login
                user_data[chat_id]["id_student"] = student[0]
                user_data[chat_id]["role"] = STUDENT_R
                bot.send_message(chat_id, "–õ–æ–≥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–æ—à—ë–ª –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç: {login}.")
            elif teacher:
                user_data[chat_id]["step"] = "password"
                user_data[chat_id]["login"] = login
                user_data[chat_id]["id_teacher"] = teacher[0]
                user_data[chat_id]["role"] = TEACHER_R
                bot.send_message(chat_id, "–õ–æ–≥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–æ—à—ë–ª –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {login}.")
            else:
                bot.send_message(chat_id, "–¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤—ë–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥–∏–Ω: {login}.")

        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–∏–Ω–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        finally:
            cursor.close()
            conn.close()
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ª–æ–≥–∏–Ω–∞.")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "password")
def process_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    login = user_data[chat_id].get("login")
    role = user_data[chat_id].get("role")

    conn = connect_to_db()
    if conn:
        cursor = conn.cursor()
        try:
            if role == STUDENT_R:
                cursor.execute("SELECT password FROM login WHERE login = %s", (login,))
            elif role == TEACHER_R:
                cursor.execute("SELECT password FROM teacher_login WHERE login = %s", (login,))
            else:
                bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —Ä–æ–ª—å: {role}.")
                return

            user = cursor.fetchone()

            if user:
                stored_hash = user[0]
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ö—ç—à–∞
                    if not (stored_hash.startswith("$2b$") or stored_hash.startswith("$2a$") or stored_hash.startswith("$2y$")):
                        raise ValueError("–•—ç—à –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ bcrypt.")

                    stored_hash_bytes = stored_hash.encode('utf-8')
                    password_bytes = password.encode('utf-8')

                    if bcrypt.checkpw(password_bytes, stored_hash_bytes):
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        if role == STUDENT_R:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º chat_id –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                            save_or_update_chat_id(user_data[chat_id]["id_student"], chat_id)
                            markup.add('–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å', '–æ—Ü–µ–Ω–∫–∏ –∏ GPA', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥', '–î–æ–∫—É–º–µ–Ω—Ç—ã')
                        elif role == TEACHER_R:
                            markup.add('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ü–µ—Ä–µ–Ω–æ—Å—ã', '–í–≤–æ–¥ –æ—Ü–µ–Ω–æ–∫ –∏ –ù-–æ–∫')

                        bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)
                        user_data[chat_id]["step"] = "authenticated"
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
                    else:
                        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                except ValueError as ve:
                    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    logger.error(f"ValueError –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {ve}")
                except Exception as e:
                    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            else:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è.")

        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        finally:
            cursor.close()
            conn.close()
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è.")




stud_schedules = {
    '–ü–û2301': {
        '–ü–ù': ['–ò–ö–¢', '–ò–ö–¢', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã'],
        '–í–¢': ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î', '–ò–ö–¢'],
        '–°–†': ['–ë–î', '–ë–î', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã'],
        '–ß–¢': ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î'],
        '–ü–¢': ['–ë–î', '–ë–î', '–ë–î']
    },
    '–ü–û2302': {
        '–ü–ù': ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã'],
        '–í–¢': ['–ò–ö–¢', '–ë–î', '–ë–î'],
        '–°–†': ['–ë–î', '–ò–ö–¢', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã'],
        '–ß–¢': ['–ë–î', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î'],
        '–ü–¢': ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î', '–ë–î']
    },
    '–í–¢2310': {
        '–ü–ù': ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î'],
        '–í–¢': ['–ê–ö', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î'],
        '–°–†': ['–ë–î', '–ë–î', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã'],
        '–ß–¢': ['–ê–ö', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ê–ö'],
        '–ü–¢': ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–î', '–ê–ö']
    }
}

teach_schedules = {
    '–ò–ö–¢': {
        '–ü–ù': ['–ü–û2301', '–ü–û2301', ''],
        '–í–¢': ['–ü–û2302', '', '–ü–û2302'],
        '–°–†': [' ', ' ', ' '],
        '–ß–¢': [' ', ' ', ' '],
        '–ü–¢': [' ', ' ', ' ']
    },
    '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤': {
        '–ü–ù': ['–ü–û2302', '–ü–û2302', '–ü–û2301'],
        '–í–¢': ['–ü–û2301', '–í–¢2310', '–ü–û2302'],
        '–°–†': [' ', ' ', '–ü–û2302'],
        '–ß–¢': ['–ü–û2301', '–ü–û2301', '–ü–û2302'],
        '–ü–¢': ['–ü–û2302', ' ', '  ']
    },
    '–ë–î': {
        '–ü–ù': [' ', ' ', '–í–¢2310'],
        '–í–¢': [' ', '–ü–û2301', '–ü–û2302'],
        '–°–†': ['–í–¢2310', '–í–¢2310', ' –ü–û2302'],
        '–ß–¢': ['–ü–û2302', '–ü–û2301', '–ü–û2301'],
        '–ü–¢': ['–ü–û2301', '–ü–û2301', '–ü–û2301']
    }
}

@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def choose_group(message):
    chat_id = message.chat.id
    role = user_data.get(chat_id, {}).get("role", None)
    if role == STUDENT_R:
        # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞
        if "group_id" in user_data[chat_id]:
            markup = types.InlineKeyboardMarkup()
            days = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢']
            buttons = [types.InlineKeyboardButton(day, callback_data=f"day_{day}") for day in days]
            markup.add(*buttons)
            bot.send_message(chat_id,
                             f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {user_data[chat_id]["group_id"]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
                             reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            groups = ['–ü–û2301', '–ü–û2302', '–í–¢2310']
            buttons = [types.InlineKeyboardButton(group, callback_data=f"group_{group}") for group in groups]
            markup.add(*buttons)
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:', reply_markup=markup)
    elif role == TEACHER_R:
        markup = types.InlineKeyboardMarkup()
        subjects = ['–ò–ö–¢', '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤', '–ë–î']
        buttons = [types.InlineKeyboardButton(subject, callback_data=f"subject_teach_{subject}") for subject in subjects]
        markup.add(*buttons)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', reply_markup=markup)
    else:
        bot.send_message(chat_id, "–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
def choose_day(call):
    chat_id = call.message.chat.id
    role = user_data.get(chat_id, {}).get("role", None)
    group_id = call.data.split("_")[1]
    user_data[chat_id]["group_id"] = group_id
    markup = types.InlineKeyboardMarkup()
    days = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢']
    buttons = [types.InlineKeyboardButton(day, callback_data=f"day_{day}") for day in days]
    markup.add(*buttons)
    bot.send_message(chat_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {group_id}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("subject_teach_"))
def choose_subject(call):
    chat_id = call.message.chat.id
    subject = call.data.split("_")[2]
    user_data[chat_id]["subject"] = subject
    markup = types.InlineKeyboardMarkup()
    days = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢']
    buttons = [types.InlineKeyboardButton(day, callback_data=f"day_{day}") for day in days]
    markup.add(*buttons)
    bot.send_message(chat_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç "{subject}". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("day_"))
def show_day_schedule(call):
    chat_id = call.message.chat.id
    role = user_data.get(chat_id, {}).get("role")
    day = call.data.split("_")[1]

    if role == STUDENT_R:
        group_id = user_data[chat_id].get("group_id")
        if group_id in stud_schedules:
            schedule = stud_schedules[group_id].get(day, [])
            if schedule:
                schedule_text = '\n'.join([f'{i+1}. {lesson}' for i, lesson in enumerate(schedule)])
                bot.send_message(chat_id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}:\n{schedule_text}')
            else:
                bot.send_message(chat_id, f'–ù–∞ {day} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.')
        else:
            bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")

    elif role == TEACHER_R:
        subject = user_data[chat_id].get("subject")
        if subject in teach_schedules:
            schedule = teach_schedules[subject].get(day, [])
            if schedule:
                schedule_text = '\n'.join([f'{i+1}. {g}' for i, g in enumerate(schedule) if g.strip()])
                if schedule_text:
                    bot.send_message(chat_id,
                                     f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject}:\n{schedule_text}')
                else:
                    bot.send_message(chat_id, f'–ù–∞ {day} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.')
            else:
                bot.send_message(chat_id, f'–ù–∞ {day} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.')
        else:
            bot.send_message(chat_id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def get_gpa_from_score(score):
    if 95 <= score <= 100:
        return 4.0
    elif 90 <= score < 95:
        return 3.67
    elif 85 <= score < 90:
        return 3.33
    elif 80 <= score < 85:
        return 3.0
    elif 75 <= score < 80:
        return 2.67
    elif 70 <= score < 75:
        return 2.33
    elif 65 <= score < 70:
        return 2.0
    elif 60 <= score < 65:
        return 1.67
    elif 55 <= score < 60:
        return 1.33
    elif 50 <= score < 55:
        return 1.0
    else:
        return 0.0

@bot.message_handler(func=lambda message: message.text == '–æ—Ü–µ–Ω–∫–∏ –∏ GPA')
def show_GPA(message):
    chat_id = message.chat.id
    id_stud = user_data[chat_id].get("id_student")
    if not id_stud:
        bot.send_message(chat_id, "ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return

    conn = connect_to_db()
    if not conn:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('''
        SELECT teachers.nazvanie_predmeta, teachers.FIO_teacher, AVG(ocenki.ocenka) as avg_score
        FROM ocenki 
        JOIN students ON students.id_student = ocenki.id_student 
        JOIN teachers ON teachers.id_teacher = ocenki.id_teacher 
        WHERE students.id_student = %s 
        GROUP BY teachers.nazvanie_predmeta, teachers.FIO_teacher
    ''', (id_stud,))
    rows = cursor.fetchall()
    if not rows:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ü–µ–Ω–∫–∞—Ö.")
        cursor.close()
        conn.close()
        return

    count_s = 0
    total_GPA = 0
    result = ""
    for row in rows:
        nazvanie_predmeta, fio_teacher, avg_score = row
        gpa = get_gpa_from_score(avg_score)
        total_GPA += gpa
        count_s += 1
        result += (f"–ü—Ä–µ–¥–º–µ—Ç: {nazvanie_predmeta}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {fio_teacher}\n"
                   f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.2f}\nGPA: {gpa:.2f}\n\n")

    if count_s > 0:
        overall_gpa = total_GPA / count_s
        result += f"–°—Ä–µ–¥–Ω–∏–π GPA –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º: {overall_gpa:.2f}"
    else:
        result += "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ GPA."

    bot.send_message(chat_id, result)
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å')
def akadem(message):
    chat_id = message.chat.id
    id_stud = user_data[chat_id].get("id_student")
    if not id_stud:
        bot.send_message(chat_id, "ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return

    conn = connect_to_db()
    if not conn:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('''
        SELECT DISTINCT teachers.nazvanie_predmeta
            FROM students
            RIGHT JOIN ocenki ON students.id_student = ocenki.id_student
            RIGHT JOIN teachers ON teachers.id_teacher = ocenki.id_teacher
            WHERE students.id_student = %s;
    ''', (id_stud,))
    subjects = cursor.fetchall()
    if not subjects:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ü–µ–Ω–∫–∞—Ö.")
        cursor.close()
        conn.close()
        return

    markup = types.InlineKeyboardMarkup()
    print(subjects)
    buttons = [types.InlineKeyboardButton(subject[0], callback_data=f"subject_{subject[0]}") for subject in subjects]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:", reply_markup=markup)

    cursor.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("subject_"))
def show_subject_ocenki(call):
    chat_id = call.message.chat.id
    id_stud = user_data[chat_id].get("id_student")
    subject = call.data.split("_")[1]

    conn = connect_to_db()
    if not conn:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()

    # –û—Ü–µ–Ω–∫–∏ –∑–∞ 1 —Å–µ–º–µ—Å—Ç—Ä
    cursor.execute('''
        SELECT teachers.nazvanie_predmeta, teachers.fio_teacher, ocenki.ocenka, ocenki.date
        FROM ocenki
        JOIN teachers ON teachers.id_teacher = ocenki.id_teacher
        JOIN students ON students.id_student = ocenki.id_student
        WHERE students.id_student = %s AND teachers.nazvanie_predmeta = %s 
          AND ocenki.date >= '2024-09-01' AND ocenki.date <= '2024-12-30'
        ORDER BY ocenki.date
    ''', (id_stud, subject))

    rows = cursor.fetchall()
    result = f"–ü—Ä–µ–¥–º–µ—Ç: *{subject}*\n"
    count_z = 0
    sredn = 0
    count=0

    if rows:
        result += "–û—Ü–µ–Ω–∫–∏ –∑–∞ 1 —Å–µ–º–µ—Å—Ç—Ä:\n"
        for row in rows:
            nazv, fio_t, ocenka, date = row[0], row[1], row[2], row[3]
            if ocenka > 0:
                result += f" - –û—Ü–µ–Ω–∫–∞: {ocenka}, –¥–∞—Ç–∞: {date}\n"
                sredn +=ocenka
                count+=1
            else:
                count_z += 1
                result += f" - –ù-–∫–∞: {date}\n"
    else:
        result += "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –∑–∞ 1 —Å–µ–º–µ—Å—Ç—Ä.\n"

    sredn_1 = sredn//count
    result+= f"–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞ 1 —Å–µ–º–µ—Å—Ç—Ä: {sredn_1}\n"

    # –û—Ü–µ–Ω–∫–∏ –∑–∞ 2 —Å–µ–º–µ—Å—Ç—Ä
    cursor.execute('''
        SELECT teachers.nazvanie_predmeta, teachers.fio_teacher, ocenki.ocenka, ocenki.date
        FROM ocenki
        JOIN teachers ON teachers.id_teacher = ocenki.id_teacher
        JOIN students ON students.id_student = ocenki.id_student
        WHERE students.id_student = %s AND teachers.nazvanie_predmeta = %s 
          AND ocenki.date >= '2025-01-14' AND ocenki.date <= '2025-06-30'
        ORDER BY ocenki.date
    ''', (id_stud, subject))
    count=0
    count_z=0
    sredn =0

    rows = cursor.fetchall()
    if rows:
        result += "\n–û—Ü–µ–Ω–∫–∏ –∑–∞ 2 —Å–µ–º–µ—Å—Ç—Ä:\n"
        for row in rows:
            nazv, fio_t, ocenka, date = row[0], row[1], row[2], row[3]
            if ocenka > 0:
                result += f" - –û—Ü–µ–Ω–∫–∞: {ocenka}, –¥–∞—Ç–∞: {date}\n"
                sredn +=ocenka
                count+=1
            else:
                count_z += 1
                result += f" - –ù-–∫–∞: {date}\n"
    else:
        result += "\n–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –∑–∞ 2 —Å–µ–º–µ—Å—Ç—Ä.\n"

    sredn_2 = sredn//count
    result+=f"–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞ 2 —Å–µ–º–µ—Å—Ç—Ä: {sredn_2}\n"


    result += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù-–æ–∫: {count_z}\n\n–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞ –≥–æ–¥: {(sredn_1+sredn_2)//2} "
    bot.send_message(chat_id, result, parse_mode="Markdown")

    cursor.close()
    conn.close()



@bot.message_handler(func=lambda message: message.text == '–î–æ–∫—É–º–µ–Ω—Ç—ã')
def docs(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    docs_add = types.InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="docs_add")
    docs_show = types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="docs_show")
    markup.add(docs_add, docs_show)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:", reply_markup=markup)
def get_docs(stud):
    conn = connect_to_db()
    if not conn:
        return []
    cursor = conn.cursor()
    query = "SELECT file_name, file_path FROM documents WHERE stud = %s"
    cursor.execute(query, (stud,))
    documents = cursor.fetchall()
    cursor.close()
    conn.close()
    document_list = [{'file_name': doc[0], 'file_path': doc[1]} for doc in documents]
    return document_list

def save_file_db(stud, file_name, file_path):
    conn = connect_to_db()
    if not conn:
        return
    cursor = conn.cursor()
    try:
        query = "INSERT INTO documents (stud, file_name, file_path) VALUES(%s, %s, %s)"
        cursor.execute(query, (stud, file_name, file_path))
        conn.commit()
    finally:
        cursor.close()
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("docs_"))
def handle_docs_callback(call):
    chat_id = call.message.chat.id
    action = call.data
    role = user_data[chat_id].get("role")
    id_stud = user_data[chat_id].get("id_student")
    id_teach = user_data[chat_id].get("id_teacher")

    if action == "docs_add":
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

        @bot.message_handler(content_types=['document'])
        def handle_file(message):
            c_id = message.chat.id
            stud_id = user_data[c_id].get("id_student")
            if message.document:
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                save_path = os.path.join("documents", message.document.file_name)
                with open(save_path, 'wb') as new_file:
                    new_file.write(downloaded_file)
                file_name = message.document.file_name
                save_file_db(stud_id, file_name, save_path)
                bot.reply_to(message, f'–§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
            else:
                bot.send_message(c_id, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞")

    elif action == "docs_show":
        if id_stud is not None:
            docum = get_docs(id_stud)
        else:
            docum = []
        if docum:
            for doc in docum:
                bot.send_message(chat_id, f"–î–æ–∫—É–º–µ–Ω—Ç: {doc['file_name']}")
                bot.send_document(chat_id, open(doc['file_path'], 'rb'))
        else:
            bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç.")

@bot.message_handler(func=lambda message: message.text == '–†–µ–π—Ç–∏–Ω–≥')
def reiting(message):
    chat_id = message.chat.id
    id_stud = user_data[chat_id].get("id_student")
    if not id_stud:
        bot.send_message(chat_id, "ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return

    conn = connect_to_db()
    if not conn:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('''
        SELECT students.id_student, ocenki.ocenka
        FROM ocenki 
        JOIN students ON students.id_student = ocenki.id_student  
        ORDER BY students.id_student
    ''')
    rows = cursor.fetchall()
    if not rows:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ü–µ–Ω–∫–∞—Ö.")
        cursor.close()
        conn.close()
        return

    students_grades = {}
    for row in rows:
        s_id, ocenka = row
        if s_id not in students_grades:
            students_grades[s_id] = {"grades": [], "count_zeros": 0}
        students_grades[s_id]["grades"].append(ocenka)
        if ocenka == 0:
            students_grades[s_id]["count_zeros"] += 1

    students_avg = []
    for student_id, data in students_grades.items():
        total_grades = sum(data["grades"])
        total_count = len(data["grades"])
        avg_grade = total_grades / total_count if total_count > 0 else 0
        students_avg.append({"id_student": student_id, "avg_grade": avg_grade, "count_zeros": data["count_zeros"]})

    students_avg.sort(key=lambda x: x["avg_grade"], reverse=True)

    result = ""
    for index, student in enumerate(students_avg):
        rank = index + 1
        avg_grade = student["avg_grade"]
        count_zeros = student["count_zeros"]
        result += f"–ú–µ—Å—Ç–æ: {rank}.\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_grade:.2f}.   –ù-–æ–∫: {count_zeros}\n\n"

    user_rank = next((index + 1 for index, student in enumerate(students_avg) if student["id_student"] == id_stud), None)
    if user_rank:
        result += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {user_rank}.\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {students_avg[user_rank - 1]['avg_grade']:.2f}\n"
    else:
        result += "\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."

    bot.send_message(chat_id, result)
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–Ω–æ—Å—ã')
def vvod(message):
    chat_id = message.chat.id
    role = user_data[chat_id].get("role")
    id_teach = user_data[chat_id].get("id_teacher")
    if role == STUDENT_R:
        bot.send_message(chat_id, "–≠—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è.")
    elif role == TEACHER_R:
        conn = connect_to_db()
        if not conn:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute('''
            SELECT gruppy.nazvanie_gruppy 
            FROM gruppy
            JOIN spec_teacher ON spec_teacher.spec_id = gruppy.spec_id
            WHERE spec_teacher.teacher_id = %s
        ''', (id_teach,))
        rows = cursor.fetchall()
        if not rows:
            bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö.")
            cursor.close()
            conn.close()
            return
        markup = types.InlineKeyboardMarkup()
        for row in rows:
            nazvanie_gruppy = row[0]
            button = types.InlineKeyboardButton(text=nazvanie_gruppy, callback_data=f"perenos_{nazvanie_gruppy}")
            markup.add(button)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)
        cursor.close()
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("perenos_"))
def choose_group_pzh(call):
    chat_id = call.message.chat.id
    group_name = call.data.split("_")[1]
    user_data[chat_id]["perenos"] = {
        "group_name": group_name,
        "process_completed": False
    }
    bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")

@bot.message_handler(func=lambda message: "perenos" in user_data.get(message.chat.id, {}) and not user_data[message.chat.id]["perenos"]["process_completed"])
def handle_group_message(message):
    chat_id = message.chat.id
    text_message = message.text
    group_name = user_data[chat_id]["perenos"]["group_name"]
    id_teach = user_data[chat_id].get("id_teacher")

    conn = connect_to_db()
    if not conn:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute("SELECT id_gruppy FROM gruppy WHERE nazvanie_gruppy = %s", (group_name,))
    group_id = cursor.fetchone()
    if group_id:
        group_id = group_id[0]
    else:
        bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        cursor.close()
        conn.close()
        return

    cursor.execute("SELECT fio_teacher FROM teachers WHERE id_teacher = %s", (id_teach,))
    teacher_name = cursor.fetchone()
    if teacher_name:
        teacher_name = teacher_name[0]
    else:
        teacher_name = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤ –ë–î
    try:
        cursor.execute("INSERT INTO reschedule (id_gruppy, text_message) VALUES (%s, %s)", (group_id, text_message))
        conn.commit()
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        cursor.close()
        conn.close()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    try:
        cursor.execute("SELECT chat_id FROM student_chat_id WHERE id_gruppy = %s", (group_id,))
        students = cursor.fetchall()
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        cursor.close()
        conn.close()
        return

    cursor.close()
    conn.close()

    if not students:
        bot.send_message(chat_id, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
        user_data[chat_id]["perenos"]["process_completed"] = True
        return

    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    for student in students:
        student_id = student[0]
        try:
            bot.send_message(
                student_id,
                f"*{teacher_name}* –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n_{text_message}_\n\nüïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {current_time}",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {student_id}: {e}")

    bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã.")
    user_data[chat_id]["perenos"]["process_completed"] = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id —Å—Ç—É–¥–µ–Ω—Ç–∞
def get_student_chat_id(student_id):
    conn = connect_to_db()
    if not conn:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return None
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT chat_id FROM student_chat_id WHERE id_student = %s", (student_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            return None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id:", e)
        return None
    finally:
        cursor.close()
        conn.close()

@bot.message_handler(func=lambda message: message.text == '–í–≤–æ–¥ –æ—Ü–µ–Ω–æ–∫ –∏ –ù-–æ–∫' and user_data.get(message.chat.id, {}).get("role") == TEACHER_R)
def teacher_menu(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É', '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫', '–£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É', '–ù–∞–∑–∞–¥')
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É' and user_data.get(message.chat.id, {}).get("role") == TEACHER_R)
def ask_student_for_grade(message):
    chat_id = message.chat.id
    id_teach = user_data[chat_id].get("id_teacher")
    conn = connect_to_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT students.id_student, students.fio
            FROM spec_teacher
            JOIN gruppy ON gruppy.spec_id = spec_teacher.spec_id
            JOIN students ON students.id_gruppy = gruppy.id_gruppy
            WHERE spec_teacher.teacher_id = %s
        ''', (id_teach,))
        students = cursor.fetchall()
        cursor.close()
        conn.close()

        if students:
            markup = types.InlineKeyboardMarkup(row_width=1)
            for student in students:
                student_id, fio = student
                markup.add(types.InlineKeyboardButton(text=fio, callback_data=f"select_student_grade_{student_id}"))
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
            user_data[chat_id]["step"] = "selecting_student_for_grade"
        else:
            bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_student_grade_"))
def receive_student_for_grade(call):
    chat_id = call.message.chat.id
    student_id = int(call.data.split("_")[-1])
    user_data[chat_id]["student_id_for_grade"] = student_id
    user_data[chat_id]["step"] = "awaiting_grade_date"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "awaiting_grade_date")
def receive_grade_date(message):
    chat_id = message.chat.id
    date_text = message.text.strip()
    try:
        date_obj = datetime.strptime(date_text, "%d.%m.%Y").date()
        user_data[chat_id]["grade_date"] = date_obj
        user_data[chat_id]["step"] = "awaiting_grade_value"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (–æ—Ç 0 –¥–æ 100):")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "awaiting_grade_value")
def receive_grade_value(message):
    chat_id = message.chat.id
    id_teach = user_data[chat_id].get("id_teacher")
    try:
        grade = int(message.text.strip())
        if 0 <= grade <= 100:
            student_id = user_data[chat_id]["student_id_for_grade"]
            grade_date = user_data[chat_id]["grade_date"]
            conn = connect_to_db()
            if not conn:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            cursor = conn.cursor()

            try:
                cursor.execute(
                    "SELECT ocenka FROM ocenki WHERE id_student = %s AND id_teacher = %s AND date = %s",
                    (student_id, id_teach, grade_date)
                )
                existing_grade = cursor.fetchone()
                if existing_grade:
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    markup.add(
                        types.InlineKeyboardButton("–î–∞", callback_data="confirm_update_grade_yes"),
                        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_update_grade_no")
                    )
                    bot.send_message(
                        chat_id,
                        f"–£ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ –Ω–∞ {grade_date.strftime('%d.%m.%Y')}: {existing_grade[0]}.\n–û–±–Ω–æ–≤–∏—Ç—å –µ–µ?",
                        reply_markup=markup
                    )
                    user_data[chat_id]["step"] = "confirming_update_grade"
                    user_data[chat_id]["new_grade"] = grade
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
                    cursor.execute(
                        "INSERT INTO ocenki (id_student, id_teacher, ocenka, date) VALUES (%s, %s, %s, %s)",
                        (student_id, id_teach, grade, grade_date)
                    )
                    conn.commit()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫
                    cursor.execute("SELECT chat_id FROM student_chat_id WHERE id_student = %s", (student_id,))
                    student_chat_id = cursor.fetchone()
                    if student_chat_id:
                        student_chat_id = student_chat_id[0]
                        cursor.execute("SELECT fio_teacher FROM teacher_name_view WHERE id_teacher = %s;", (id_teach,))
                        teacher_fio = cursor.fetchone()
                        teacher_fio = teacher_fio[0] if teacher_fio else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
                        bot.send_message(
                            student_chat_id,
                            f"–í–∞–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ {grade} –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_fio} –Ω–∞ –¥–∞—Ç—É {grade_date.strftime('%d.%m.%Y')}."
                        )
                    bot.send_message(chat_id, "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ —Å—Ç—É–¥–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
                    user_data[chat_id]["step"] = "authenticated"
            except psycopg2.errors.CheckViolation:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –í —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å —É—Ä–æ–∫–∞ –Ω–µ –±—ã–ª–æ.")
            finally:
                cursor.close()
                conn.close()
        else:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 100.")
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")


@bot.callback_query_handler(func=lambda call: call.data in ["confirm_update_grade_yes", "confirm_update_grade_no"])
def confirm_update_grade(call):
    chat_id = call.message.chat.id
    if call.data == "confirm_update_grade_yes":
        student_id = user_data[chat_id]["student_id_for_grade"]
        id_teach = user_data[chat_id].get("id_teacher")
        new_grade = user_data[chat_id]["new_grade"]
        grade_date = user_data[chat_id]["grade_date"]
        conn = connect_to_db()
        if not conn:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE ocenki SET ocenka = %s WHERE id_student = %s AND id_teacher = %s AND date = %s",
            (new_grade, student_id, id_teach, grade_date)
        )
        conn.commit()
        cursor.close()
        conn.close()
        bot.send_message(chat_id, "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        user_data[chat_id]["step"] = "authenticated"
    else:
        bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_data[chat_id]["step"] = "authenticated"

@bot.message_handler(func=lambda message: message.text == '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫' and user_data.get(message.chat.id, {}).get("role") == TEACHER_R)
def ask_student_for_absence(message):
    chat_id = message.chat.id
    id_teach = user_data[chat_id].get("id_teacher")
    conn = connect_to_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT students.id_student, students.fio
            FROM spec_teacher
            JOIN gruppy ON gruppy.spec_id = spec_teacher.spec_id
            JOIN students ON students.id_gruppy = gruppy.id_gruppy
            WHERE spec_teacher.teacher_id = %s
        ''', (id_teach,))
        students = cursor.fetchall()
        cursor.close()
        conn.close()

        if students:
            markup = types.InlineKeyboardMarkup(row_width=1)
            for student in students:
                student_id, fio = student
                markup.add(types.InlineKeyboardButton(text=fio, callback_data=f"select_student_absence_{student_id}"))
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=markup)
            user_data[chat_id]["step"] = "selecting_student_for_absence"
        else:
            bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_student_absence_"))
def receive_student_for_absence(call):
    chat_id = call.message.chat.id
    student_id = int(call.data.split("_")[-1])
    user_data[chat_id]["student_id_for_absence"] = student_id
    user_data[chat_id]["step"] = "awaiting_absence_date"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "awaiting_absence_date")
def receive_absence_date(message):
    chat_id = message.chat.id
    id_teach = user_data[chat_id].get("id_teacher")
    student_id = user_data[chat_id]["student_id_for_absence"]
    date_text = message.text.strip()
    try:
        date_obj = datetime.strptime(date_text, "%d.%m.%Y").date()
        user_data[chat_id]["absence_date"] = date_obj

        conn = connect_to_db()
        if not conn:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute(
            "SELECT ocenka FROM ocenki WHERE id_student = %s AND id_teacher = %s AND date = %s",
            (student_id, id_teach, date_obj)
        )
        existing_grade = cursor.fetchone()
        if existing_grade:
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton("–î–∞", callback_data="confirm_update_absence_yes"),
                types.InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_update_absence_no")
            )
            bot.send_message(
                chat_id,
                f"–£ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ –Ω–∞ {date_obj.strftime('%d.%m.%Y')}: {existing_grade[0]}.\n–û–±–Ω–æ–≤–∏—Ç—å –µ—ë –Ω–∞ –ù-–∫—É?",
                reply_markup=markup
            )
            user_data[chat_id]["step"] = "confirming_update_absence"
        else:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ù-–∫—É
            cursor.execute(
                "INSERT INTO ocenki (id_student, id_teacher, ocenka, date) VALUES (%s, %s, %s, %s)",
                (student_id, id_teach, 0, date_obj)
            )
            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            cursor.execute("SELECT chat_id FROM student_chat_id WHERE id_student = %s", (student_id,))
            student_chat_id = cursor.fetchone()
            if student_chat_id:
                student_chat_id = student_chat_id[0]
                cursor.execute("SELECT fio_teacher FROM teachers WHERE id_teacher = %s", (id_teach,))
                teacher_fio = cursor.fetchone()
                teacher_fio = teacher_fio[0] if teacher_fio else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
                bot.send_message(
                    student_chat_id,
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ù-–∫—É –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_fio} –Ω–∞ –¥–∞—Ç—É {date_obj.strftime('%d.%m.%Y')}."
                )
            bot.send_message(chat_id, "–ü—Ä–æ–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω.")
            user_data[chat_id]["step"] = "authenticated"
        cursor.close()
        conn.close()
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_update_absence_yes", "confirm_update_absence_no"])
def confirm_update_absence(call):
    chat_id = call.message.chat.id
    id_teach = user_data[chat_id].get("id_teacher")
    student_id = user_data[chat_id].get("student_id_for_absence")
    absence_date = user_data[chat_id].get("absence_date")

    if call.data == "confirm_update_absence_yes":
        conn = connect_to_db()
        if not conn:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE ocenki SET ocenka = %s WHERE id_student = %s AND id_teacher = %s AND date = %s",
            (0, student_id, id_teach, absence_date)
        )
        conn.commit()

        cursor.execute("SELECT chat_id FROM student_chat_id WHERE id_student = %s", (student_id,))
        student_chat_id = cursor.fetchone()
        if student_chat_id:
            student_chat_id = student_chat_id[0]
            cursor.execute("SELECT fio_teacher FROM teachers WHERE id_teacher = %s", (id_teach,))
            teacher_fio = cursor.fetchone()
            teacher_fio = teacher_fio[0] if teacher_fio else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
            bot.send_message(
                student_chat_id,
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ù-–∫—É –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_fio} –Ω–∞ –¥–∞—Ç—É {absence_date.strftime('%d.%m.%Y')}."
            )

        cursor.close()
        conn.close()

        bot.send_message(chat_id, "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ù-–∫—É.")
    else:
        bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ü–µ–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.")

    user_data[chat_id]["step"] = "authenticated"











@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É' and user_data.get(message.chat.id, {}).get("role") == TEACHER_R)
def ask_student_for_grade(message):
    chat_id = message.chat.id
    id_teach = user_data[chat_id].get("id_teacher")
    conn = connect_to_db()
    if conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT students.id_student, students.fio
            FROM spec_teacher
            JOIN gruppy ON gruppy.spec_id = spec_teacher.spec_id
            JOIN students ON students.id_gruppy = gruppy.id_gruppy
            WHERE spec_teacher.teacher_id = %s
        ''', (id_teach,))
        students = cursor.fetchall()
        cursor.close()
        conn.close()

        if students:
            markup = types.InlineKeyboardMarkup(row_width=1)
            for student in students:
                student_id, fio = student
                markup.add(types.InlineKeyboardButton(text=fio, callback_data=f"delete_grade_{student_id}"))
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
            user_data[chat_id]["step"] = "selecting_student_for_grade"
        else:
            bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ callback
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_grade_"))
def receive_student_for_grade(call):
    chat_id = call.message.chat.id
    student_id = int(call.data.split("_")[-1])
    user_data[chat_id]["student_id_for_grade"] = student_id
    user_data[chat_id]["step"] = "delete_grade_date"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "delete_grade_date")
def receive_grade_date(message):
    chat_id = message.chat.id
    date_text = message.text.strip()
    try:
        date_obj = datetime.strptime(date_text, "%d.%m.%Y").date()
        user_data[chat_id]["grade_date"] = date_obj
        user_data[chat_id]["step"] = "delete_grade_confirm"
        bot.send_message(chat_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "delete_grade_confirm")
def confirm_grade_deletion(message):
    chat_id = message.chat.id
    confirmation = message.text.strip().lower()
    if confirmation == '–¥–∞':
        student_id = user_data[chat_id].get("student_id_for_grade")
        grade_date = user_data[chat_id].get("grade_date")
        conn = connect_to_db()
        if conn:
            cursor = conn.cursor()
            try:
                cursor.execute('''
                    DELETE FROM ocenki
                    WHERE id_student = %s AND date = %s
                ''', (student_id, grade_date))
                conn.commit()
                cursor.close()
                conn.close()

                bot.send_message(chat_id, "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")



        user_data[chat_id].pop("step", None)
        user_data[chat_id].pop("student_id_for_grade", None)
        user_data[chat_id].pop("grade_date", None)
    elif confirmation == '–Ω–µ—Ç':
        bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        user_data[chat_id].pop("step", None)
    else:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")




@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def go_back(message):
    chat_id = message.chat.id
    user_data[chat_id]["step"] = "authenticated"
    role = user_data[chat_id].get("role")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if role == STUDENT_R:
        markup.add(
            '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å',
            '–æ—Ü–µ–Ω–∫–∏ –∏ GPA',
            '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            '–†–µ–π—Ç–∏–Ω–≥',
            '–î–æ–∫—É–º–µ–Ω—Ç—ã'
        )
    elif role == TEACHER_R:
        markup.add(
            '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            '–ü–µ—Ä–µ–Ω–æ—Å—ã',
            '–í–≤–æ–¥ –æ—Ü–µ–Ω–æ–∫ –∏ –ù-–æ–∫'
        )
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

bot.infinity_polling()
